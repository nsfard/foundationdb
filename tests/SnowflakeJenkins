def buildScmInfo
def cancelled = false
stage("Build") {
    node('test-dynamic-slave') {

        sfScmInfo = checkout([$class: 'GitSCM',
            branches: [[name: '*/master']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake']],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: 'b4f59663-ae0a-4384-9fdc-c7f2fe1c4fca', url: 'https://github.com/snowflakedb/fdb_snowflake.git']]
            ])
        println("$sfScmInfo")

        buildScmInfo = checkout([
            $class: 'GitSCM',
            branches: scm.branches,
            doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
            extensions: scm.extensions,
            userRemoteConfigs: scm.userRemoteConfigs,
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake/jenkins/foundationdb']]
            ])
        println("$buildScmInfo")

        try {
            sh '''
                |# This script is inlined in the jenkinsfile so that it's not overridden by
                |# local changes in the pull-request.  We could move it to a script, if we
                |# want to mask the list, but we should put it in the snowflake-internal repo (fdb_snowflake.git)
                |#
                |# $CHANGE_AUTHOR is set to the github user that authored the change (appears to not rely
                |# on the users's config, so shouldn't be spoofable.  If unset, we're not building a PR.
                |#
                |# I think if our user is not on the whitelist, we want to abort, if possible, instead of failing?
                |
                |# This list is sorted by username!  Don't make me come find you!
                |set -x
                |env
                |set +x
                |if [[ -z $CHANGE_AUTHOR ]]; then
                |  echo "Not a pull-request, skipping whitelist check"
                |  exit 0
                |fi
                |
                |whitelist=(
                |amotivala           # (Ashish)
                |atn34               # (Andrew)
                |dyoungworth         # (David)
                |fzhjon              # (Jon)
                |kaomakino           # (Kao)
                |marcmac             # (Marc)
                |marcmacorg          # (Marc - org account)
                |mpilman             # (Markus)
                |negoyal             # (Neelam)
                |senthil-ram         # (Senthil)
                |tclinken            # (Trevor)
                |zjuLcg              # (Chaoguang)
                |)
                |count=${#whitelist[@]}
                |search=$(echo $CHANGE_AUTHOR | tr '[:upper:]' '[:lower:]')
                |for ((i=0;i < $count;i++)) {
                |    item=$(echo ${whitelist[$i]} | tr '[:upper:]' '[:lower:]')
                |    if [ "${item}" == "${search}" ]; then
                |        echo "User ${CHANGE_AUTHOR} is on the whitelist"
                |        exit 0
                |    fi
                |}
                |echo "User ${CHANGE_AUTHOR} is NOT on the whitelist - Aborting"
                |exit 1 # TODO figure out how to abort the job
              '''.stripMargin()
        } catch(e) {
            currentBuild.result = 'ABORTED'
            cancelled = true
            return
        }

        sh """
            |export GIT_SPECIFIER=${buildScmInfo.GIT_COMMIT}
            |snowflake/jenkins/foundationdb/tests/jenkins/pr_build.sh
          """.stripMargin()
    }
}

def makeTestStep(iteration) {
    return {
        node("test-dynamic-slave2") {
            sfScmInfo = checkout([$class: 'GitSCM',
                branches: [[name: '*/master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake']],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'b4f59663-ae0a-4384-9fdc-c7f2fe1c4fca', url: 'https://github.com/snowflakedb/fdb_snowflake.git']]
                ])
            println("$sfScmInfo")

            scmInfo = checkout([
                $class: 'GitSCM',
                branches: scm.branches,
                doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                extensions: scm.extensions,
                userRemoteConfigs: scm.userRemoteConfigs,
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake/jenkins/foundationdb']]
                ])
            println("$scmInfo")
            sh """
                |export PR_ITERATION=${iteration}
                |snowflake/jenkins/foundationdb/tests/jenkins/pr_test_one.sh
              """.stripMargin()
              archiveArtifacts artifacts: 'setup_*log,iteration_*log,traces_*.json.gz',
                optional: true,
                onlyIfSuccessful: false
        }
    }
}

if (!cancelled) {
    stage("Test") {
        def testSteps = [:]
        for (int i = 0; i < 16; i++) {
            testSteps["Iteration ${i}"] = makeTestStep(i)
        }
        println(testSteps)

        parallel testSteps
        build job: "NotifyGitHub",
            parameters: [
                string(name: 'pr_branch', value: buildScmInfo.GIT_BRANCH),
                string(name: 'publish_url', value: "https://foo.bar/stuff")
            ],
            propagate: false
    }

    stage("Report") {
        node('test-dynamic-slave2') {

            sfScmInfo = checkout([$class: 'GitSCM',
                branches: [[name: '*/master']],
                doGenerateSubmoduleConfigurations: false,
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake']],
                submoduleCfg: [],
                userRemoteConfigs: [[credentialsId: 'b4f59663-ae0a-4384-9fdc-c7f2fe1c4fca', url: 'https://github.com/snowflakedb/fdb_snowflake.git']]
                ])
            println("$sfScmInfo")

            buildScmInfo = checkout([
                $class: 'GitSCM',
                branches: scm.branches,
                doGenerateSubmoduleConfigurations: scm.doGenerateSubmoduleConfigurations,
                extensions: scm.extensions,
                userRemoteConfigs: scm.userRemoteConfigs,
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'snowflake/jenkins/foundationdb']]
                ])
            println("$buildScmInfo")

            sh """
                |export GIT_SPECIFIER=${buildScmInfo.GIT_COMMIT}
                |snowflake/jenkins/foundationdb/tests/jenkins/pr_report.sh
              """.stripMargin()
            archiveArtifacts artifacts: '**/fdb6-report-*.txt',
                optional: true,
                onlyIfSuccessful: false
        }
    }
}
